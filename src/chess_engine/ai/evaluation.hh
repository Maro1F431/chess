#pragma once

#include "../board/chessboard.hh"
namespace ai
{
    using namespace board;
    class Evaluation
    {
    public:
        static constexpr double tables[7][8][8]{

            {// queen
             {-20, -10, -10, -5, -5, -10, -10, -20},
             {-10, 0, 0, 0, 0, 0, 0, -10},
             {-10, 0, 5, 5, 5, 5, 0, -10},
             {-5, 0, 5, 5, 5, 5, 0, -5},
             {0, 0, 5, 5, 5, 5, 0, -5},
             {-10, 5, 5, 5, 5, 5, 0, -10},
             {-10, 0, 5, 0, 0, 0, 0, -10},
             {-20, -10, -10, -5, -5, -10, -10, -20}},
            {// rooks
             {0, 0, 0, 0, 0, 0, 0, 0},
             {5, 10, 10, 10, 10, 10, 10, 5},
             {-5, 0, 0, 0, 0, 0, 0, -5},
             {-5, 0, 0, 0, 0, 0, 0, -5},
             {-5, 0, 0, 0, 0, 0, 0, -5},
             {-5, 0, 0, 0, 0, 0, 0, -5},
             {-5, 0, 0, 0, 0, 0, 0, -5},
             {0, 0, 0, 5, 5, 0, 0, 0}},
            {// bishop
             {-20, -10, -10, -10, -10, -10, -10, -20},
             {-10, 0, 0, 0, 0, 0, 0, -10},
             {-10, 0, 5, 10, 10, 5, 0, -10},
             {-10, 5, 5, 10, 10, 5, 5, -10},
             {-10, 0, 10, 10, 10, 10, 0, -10},
             {-10, 10, 10, 10, 10, 10, 10, -10},
             {-10, 5, 0, 0, 0, 0, 5, -10},
             {-20, -10, -10, -10, -10, -10, -10, -20}},
            {// knights
             {-50, -40, -30, -30, -30, -30, -40, -50},
             {-40, -20, 0, 0, 0, 0, -20, -40},
             {-30, 0, 10, 15, 15, 10, 0, -30},
             {-30, 5, 15, 20, 20, 15, 5, -30},
             {-30, 0, 15, 20, 20, 15, 0, -30},
             {-30, 5, 10, 15, 15, 10, 5, -30},
             {-40, -20, 0, 5, 5, 0, -20, -40},
             {-50, -40, -30, -30, -30, -30, -40, -50}},
            {// pawn
             {0, 0, 0, 0, 0, 0, 0, 0},
             {50, 50, 50, 50, 50, 50, 50, 50},
             {10, 10, 20, 30, 30, 20, 10, 10},
             {5, 5, 10, 25, 25, 10, 5, 5},
             {0, 0, 0, 20, 20, 0, 0, 0},
             {5, -5, -10, 0, 0, -10, -5, 5},
             {5, 10, 10, -20, -20, 10, 10, 5},
             {0, 0, 0, 0, 0, 0, 0, 0}},
            {// king
             {-30, -40, -40, -50, -50, -40, -40, -30},
             {-30, -40, -40, -50, -50, -40, -40, -30},
             {-30, -40, -40, -50, -50, -40, -40, -30},
             {-30, -40, -40, -50, -50, -40, -40, -30},
             {-20, -30, -30, -40, -40, -30, -30, -20},
             {-10, -20, -20, -20, -20, -20, -20, -10},
             {20, 20, 0, 0, 0, 0, 20, 20},
             {20, 30, 10, 0, 0, 10, 30, 20}},
            {// king E N D G A M E
             {-50, -40, -30, -20, -20, -30, -40, -50},
             {-30, -20, -10, 0, 0, -10, -20, -30},
             {-30, -10, 20, 30, 30, 20, -10, -30},
             {-30, -10, 30, 40, 40, 30, -10, -30},
             {-30, -10, 30, 40, 40, 30, -10, -30},
             {-30, -10, 20, 30, 30, 20, -10, -30},
             {-30, -30, 0, 0, 0, 0, -30, -30},
             {-50, -30, -30, -30, -30, -30, -30, -50}}};

        Chessboard& chessboard_;

        int WdoubledPawns;
        int WblockedPawns;
        int WisolatedPawns;
        int BdoubledPawns;
        int BblockedPawns;
        int BisolatedPawns;

        bool whiteIsCheckmated;
        bool blackIsCheckmated;

        explicit Evaluation(Chessboard& chessboard);
        double rate_chessboard(board::Color side);
        double count_pieces(PieceType pieceType, Color color,
                            double pieceValue);
        double count_pawns(Color color);
        bool is_pawn_blocked(uint8_t pawnSquare, Color color);

        double evaluate_king();

        bool is_end_game();

        bool check_has_qmp(Chessboard_rpr& rpr, Color color) const;
    };
} // namespace ai
